@using System.ComponentModel.DataAnnotations
@using BatDemo.BankAccounts
@using BatDemo.BankAccounts.Dto
@using BatDemo.Web.Components.Common
@using BatDemo.Web.Components.DetailFields
@using BatDemo.Localization

@using static BatDemo.Web.Components.Common.BreadcrumbComponent
@inject NavigationManager NavManager
@inject IJSRuntime JS

@{
	List<BreadcrumbItem> Breadcrumb = [
		new BreadcrumbItem(@LC.L("BankAccount"), "/bank-account"),
		new BreadcrumbItem($"{(!Model.Id.HasValue ? @LC.L("Create") : View ? @LC.L("Detail") : @LC.L("Update"))} {@LC.L("BankAccount")}")
	];
}
<section class="content-header">
	<div class="container-fluid tw-flex tw-items-center tw-justify-between">
		<BreadcrumbComponent DataItems="Breadcrumb" />
		<div class="tw-flex tw-gap-3">
			@if (!View)
			{
				<DxButton @onclick="() => Submit()" RenderStyle="ButtonRenderStyle.Primary" Enabled="!Loading" SizeMode="SizeMode.Medium">
					@if (Loading)
					{
						<DxWaitIndicator Visible="Loading" CssClass="tw-mr-2" SizeMode="SizeMode.Small" />
					}
					else
					{
						<i class="fas fa-save tw-mr-2 tw-block" />
					}
					@LC.L("Save")
				</DxButton>
			}
			@if (View)
			{
				<DxButton @onclick="HandleGoToEdit" RenderStyle="ButtonRenderStyle.Primary" SizeMode="SizeMode.Medium">
					<i class="fas fa-pen tw-mr-2 tw-block" />
					@LC.L("Edit")
				</DxButton>
			}
			<DxButton RenderStyle="ButtonRenderStyle.Secondary" @onclick="@(() => NavManager.NavigateTo("/bank-account", true))" SizeMode="SizeMode.Medium">
				<i class="fas fa-chevron-left mr-2"></i>
				@LC.L("Back")
			</DxButton>
		</div>
	</div>
</section>
<section class="content">
	<div class="container-fluid tw-pb-4">
		<div class="card">
			<div class="tw-px-5 tw-pb-6">
				@if (View)
				{
					<div class="FormDetail">
						<div class="tw-flex tw-gap-4 tw-flex-wrap">
							<div class="tw-flex-1">
								<DetailFieldTextComponent Label="@LC.L("BankAccount_AccountNumber")" Value="@(Model.AccountNumber)" />
								<DetailFieldTextComponent Label="@LC.L("BankAccount_AccountHolderName")" Value="@(Model.AccountHolderName)" />
								<DetailFieldNumberComponent Label="@LC.L("BankAccount_Balance")" Value="@(Model.Balance)" />

							</div>
						</div>
					</div>
				}
				else
				{
					<EditForm @ref="Form" Model="Model"
							  OnValidSubmit="HandleValidSubmit"
							  OnInvalidSubmit="HandleInvalidSubmit"
							  Context="newContext">
						<DataAnnotationsValidator />
						<DxFormLayout CssClass="Form" CaptionPosition="CaptionPosition.Vertical">
							<DxFormLayoutItem Caption="@LC.L("BankAccount_AccountNumber")" ColSpanLg="6" ColSpanMd="6" CssClass="Required">
								<DxTextBox @bind-Text="Model.AccountNumber" NullText="@LC.L("BankAccount_AccountNumber")" ShowValidationIcon="true" />
								<ValidationMessage For="@(() => Model.AccountNumber)" />
							</DxFormLayoutItem>

							<DxFormLayoutItem Caption="@LC.L("BankAccount_AccountHolderName")" ColSpanLg="6" ColSpanMd="6" CssClass="Required">
								<DxTextBox @bind-Text="Model.AccountHolderName" NullText="@LC.L("BankAccount_AccountHolderName")" ShowValidationIcon="true" />
								<ValidationMessage For="@(() => Model.AccountHolderName)" />
							</DxFormLayoutItem>

							<DxFormLayoutItem Caption="@LC.L("BankAccount_Balance")" ColSpanLg="6" ColSpanMd="6">
								<DxSpinEdit @bind-Value="Model.Balance" NullText="@LC.L("BankAccount_Balance")" ShowValidationIcon="true" />
								<ValidationMessage For="@(() => Model.Balance)" />
							</DxFormLayoutItem>

						</DxFormLayout>
					</EditForm>
				}
			</div>
		</div>
	</div>
</section>

@code {
	[Inject]
	private IBankAccountCrudService service { get; set; }

	[Parameter]
	public bool View { get; set; }
	[Parameter]
	public BankAccountCrudDto Detail { get; set; }

	public BankAccountCrudDto Model { get; set; }

	private EditForm Form;
	private bool Loading = false;
	private bool IsCreate = true;

	protected override void OnInitialized()
	{
		Model = Detail;
		if (Detail.Id.HasValue)
		{
			IsCreate = false;
		}
		base.OnInitialized();
	}

	public async void Submit()
	{
		bool isValid = Form.EditContext.Validate();
		if (isValid)
		{
			// var resultValidate = await service.ValidateExitedAccountNumberAsync(Model.AccountNumber);
			// if (!resultValidate.Success)
			// {
			// 	await JS.InvokeVoidAsync($"toastr.error", resultValidate.Message);
			// }
			// else
			// {
			// 	await HandleValidSubmit();
			// }
			await HandleValidSubmit();
		}
		else await HandleInvalidSubmit();
	}

	async Task HandleValidSubmit()
	{
		// Loading = true;
		StateHasChanged();


		ServiceResponse<BankAccountCrudDto> result;
		if (!Model.Id.HasValue)
		{
			result = await service.CreateAsync(Model);
			Model.Id = result.Data.Id;

		}
		else
		{
			result = await service.UpdateAsync(Model);
		}
		if (result.Success)
		{
			await JS.InvokeVoidAsync($"toastr.success", $"Create a BankAccount successfully!");
			NavManager.NavigateTo($"/bank-account");
			NavManager.Refresh();
		}
		else
		{
			await JS.InvokeVoidAsync($"toastr.error", result.Message);
		}

		
	}

	async Task HandleInvalidSubmit()
	{
		await JS.InvokeVoidAsync("toastr.error", "Check your input!");
		// _ = FocusFirstError();
	}

	private void HandleGoToEdit()
	{
		View = false;
		var id = Model.Id.HasValue ? Model.Id.Value.ToString() : string.Empty;
		NavManager.NavigateTo($"/bank-account/detail?id={id}");
		StateHasChanged();
	}

}
